generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  name            String?
  username        String?        @unique
  bio             String?
  email           String         @unique // Made required and must be unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  profileImage    String?
  hashedPassword  String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  hasNotification Boolean?
  accounts        Account[]
  comments        Comment[]
  following       Follow[]       @relation("Follower")
  followedBy      Follow[]       @relation("Following")
  likedPosts      Like[]
  notifications   Notification[]
  posts           Post[]
  sessions        Session[]

  @@index([email])
  @@index([username])
}

model Post {
  id        String    @id @default(cuid())
  body      String
  image     String?   // URL untuk gambar
  video     String?   // URL untuk video
  mediaType String?   // "image", "video", atau null
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  comments  Comment[]
  likes     Like[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt(sort: Desc)])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([createdAt(sort: Desc)])
  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  body      String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  follower    User   @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}
